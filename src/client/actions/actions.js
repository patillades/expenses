import 'whatwg-fetch';
import hashHistory from 'react-router/lib/hashHistory';

import MODAL_MESSAGES from 'constants/messages';
import {
  CLOSE_MODAL,
  SESSION_EXPIRED,
  LOG_OUT,
  REGISTRATION_REQUEST,
  LOGIN_REQUEST,
  EDIT_EXPENSE,
} from 'constants/actionTypes';
import sendRequest, { sessionExpired } from './requestActions';

/**
 * Create an action with no payload
 *
 * @returns {{type: string}}
 */
function action(type) {
  return { type };
}

/**
 * Change event on a form input
 *
 * @param {string} type
 * @param {string} form - form the input belongs to
 * @param {string} field - field the input is related to
 * @param {string} value - value on the input
 * @returns {{type: string, id: string, value: string}}
 */
function inputChange(type, form, field, value) {
  return {
    type,
    form,
    field,
    value,
  };
}

/**
 * Handle the click of the button on the modal dialog, checking if the state requires a navigation
 * to another page before closing the dialog
 *
 * @returns {function}
 */
function modalBtnClick() {
  return (dispatch, getState) => {
    const modalMsg = getState().requests.modal.msg;

    if ([
      MODAL_MESSAGES[REGISTRATION_REQUEST],
      MODAL_MESSAGES[LOGIN_REQUEST],
    ].includes(modalMsg)
    ) {
      hashHistory.push('/');
    } else if (modalMsg === MODAL_MESSAGES[SESSION_EXPIRED]) {
      hashHistory.push('/login');
    }

    return dispatch(action(CLOSE_MODAL));
  };
}

/**
 * Date object generated by the moment module
 *
 * @typedef {object} MomentDate
 */

/**
 * The date selected on the date or time pickers used to create/edit expenses has been changed
 *
 * @param {string} type
 * @param {('create'|'edit'|'$gte_date'|'$lte_date')} form - The form or filter input where the
 * change happened
 * @param {MomentDate} date
 * @returns {{type: string, form: ('create'|'edit'|'$gte_date'|'$lte_date'), date: MomentDate}}
 */
function expenseDatetimeChange(type, form, date) {
  return { type, form, date };
}

/**
 * Turn the given expense row editable
 *
 * @param {ObjectId} expenseId
 * @return {{type: string, expenseId: ObjectId}}
 */
function editExpense(expenseId) {
  return { type: EDIT_EXPENSE, expenseId };
}

/**
 * Log user out and redirect to login page
 *
 * @return {{type: string}}
 */
function logOut() {
  hashHistory.push('/login');

  return { type: LOG_OUT };
}

export {
  inputChange,
  sendRequest,
  sessionExpired,
  modalBtnClick,
  action,
  logOut,
  expenseDatetimeChange,
  editExpense,
};
